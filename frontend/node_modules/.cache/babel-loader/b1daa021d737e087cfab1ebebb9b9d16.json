{"ast":null,"code":"import axios from 'axios';\nimport { createHash } from 'crypto';\nexport class NoverdoseRepo {\n  constructor() {\n    this.url = 'http://localhost:8000';\n    this.config = {};\n  }\n\n  login(email, password) {\n    return new Promise((resolve, reject) => {\n      axios.get(`${this.url}/login`, {\n        params: {\n          email: email,\n          password: password\n        }\n      }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n    });\n  }\n\n  addUser(name, email, password) {\n    return new Promise((resolve, reject) => {\n      axios.post(`${this.url}/addUser`, {\n        name: name,\n        email: email,\n        password: password\n      }, this.config).then(x => {\n        resolve(x.data);\n      }).catch(x => {\n        alert(x);\n        reject(x);\n      });\n    });\n  }\n\n  getUserById(id) {\n    return new Promise((resolve, reject) => {\n      axios.get(`${this.url}/users/${id}`, this.config).then(x => resolve(x.data)).catch(x => {\n        alert(x);\n        reject(x);\n      });\n    });\n  }\n\n  search(name, disease, symptom, min, max, sideEffect) {\n    var where = \"\";\n\n    if (name == 'N/A' || name == 'n/a') {\n      if (disease == \"N/A\") {\n        if (symptom == 'N/A') {\n          if (min == 'N/A' || min == 'n/a') {\n            where = \"WHERE price <= \" + max;\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  where: where\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          } else if (max == 'N/A' || max == 'n/a') {\n            where = \"WHERE price >= \" + min;\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  where: where\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          } else {\n            return new Promise((resolve, reject) => {\n              where = \"WHERE price Between\" + min + \" AND \" + max;\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  where: where\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          }\n        } else {\n          where = \"WHERE price <= \" + max + \" AND s.id =\" + symptom;\n\n          if (min == 'N/A' || min == 'n/a') {\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  price: max,\n                  symptom: symptom\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          } else if (max == 'N/A' || max == 'n/a') {\n            where = \"WHERE price >= \" + max + \" AND s.id =\" + symptom;\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  price: max,\n                  symptom: symptom\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          } else {\n            where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND s.id =\" + symptom;\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  max: max,\n                  min: min,\n                  symptom: symptom\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          }\n        }\n      } else {\n        if (symptom == 'N/A') {\n          if (min == 'N/A' || min == 'n/a') {\n            where = \"WHERE price <= \" + max + \" AND d.id = \" + disease;\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  where: where\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          } else if (max == 'N/A' || max == 'n/a') {\n            where = \"WHERE price >= \" + min + \" AND d.id = \" + disease;\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  where: where\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          } else {\n            return new Promise((resolve, reject) => {\n              where = \"WHERE price Between\" + min + \" AND \" + max + \" AND D.id = \" + disease;\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  where: where\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          }\n        } else {\n          where = \"WHERE price <= \" + max + \" AND s.id =\" + symptom + \" AND D.id = \" + disease;\n\n          if (min == 'N/A' || min == 'n/a') {\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  price: max,\n                  symptom: symptom\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          } else if (max == 'N/A' || max == 'n/a') {\n            where = \"WHERE price >= \" + max + \" AND s.id =\" + symptom + \" AND D.id = \" + disease;\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  price: max,\n                  symptom: symptom\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          } else {\n            where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND s.id =\" + symptom + \" AND D.id = \" + disease;\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  max: max,\n                  min: min,\n                  symptom: symptom\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          }\n        }\n      }\n    } else {\n      if (disease == \"N/A\") {\n        if (symptom == 'N/A') {\n          if (min == 'N/A' || min == 'n/a') {\n            where = \"WHERE price <= \" + max + \" AND name = \" + name;\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  where: where\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          } else if (max == 'N/A' || max == 'n/a') {\n            where = \"WHERE price >= \" + min + \" AND name = \" + name;\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  where: where\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          } else {\n            return new Promise((resolve, reject) => {\n              where = \"WHERE price Between\" + min + \" AND \" + max + \" AND name = \" + name;\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  where: where\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          }\n        } else {\n          where = \"WHERE price <= \" + max + \" AND s.id =\" + symptom + \" AND name = \" + name;\n\n          if (min == 'N/A' || min == 'n/a') {\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  price: max,\n                  symptom: symptom\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          } else if (max == 'N/A' || max == 'n/a') {\n            where = \"WHERE price >= \" + max + \" AND s.id =\" + symptom + \" AND name = \" + name;\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  price: max,\n                  symptom: symptom\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          } else {\n            where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND s.id =\" + symptom + \" AND name = \" + name;\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  max: max,\n                  min: min,\n                  symptom: symptom\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          }\n        }\n      } else {\n        if (symptom == 'N/A') {\n          if (min == 'N/A' || min == 'n/a') {\n            where = \"WHERE price <= \" + max + \" AND d.id = \" + disease + \" AND name = \" + name;\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  where: where\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          } else if (max == 'N/A' || max == 'n/a') {\n            where = \"WHERE price >= \" + min + \" AND d.id = \" + disease + \" AND name = \" + name;\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  where: where\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          } else {\n            return new Promise((resolve, reject) => {\n              where = \"WHERE price Between\" + min + \" AND \" + max + \" AND D.id = \" + disease + \" AND name = \" + name;\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  where: where\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          }\n        } else {\n          where = \"WHERE price <= \" + max + \" AND s.id =\" + symptom + \" AND D.id = \" + disease + \" AND name = \" + name;\n\n          if (min == 'N/A' || min == 'n/a') {\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  price: max,\n                  symptom: symptom\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          } else if (max == 'N/A' || max == 'n/a') {\n            where = \"WHERE price >= \" + max + \" AND s.id =\" + symptom + \" AND D.id = \" + disease + \" AND name = \" + name;\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  price: max,\n                  symptom: symptom\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          } else {\n            where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND s.id =\" + symptom + \" AND D.id = \" + disease + \" AND name = \" + name;\n            return new Promise((resolve, reject) => {\n              axios.get(`${this.url}/getDrugs`, {\n                params: {\n                  max: max,\n                  min: min,\n                  symptom: symptom\n                }\n              }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n            });\n          }\n        }\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/dylanweeks/Desktop/NOverdose/frontend/src/Api/NoverdoseRepo.js"],"names":["axios","createHash","NoverdoseRepo","url","config","login","email","password","Promise","resolve","reject","get","params","then","resp","data","catch","alert","addUser","name","post","x","getUserById","id","search","disease","symptom","min","max","sideEffect","where","price"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { createHash } from 'crypto';\n\nexport class NoverdoseRepo {\n\n    url = 'http://localhost:8000'\n\n    config = {\n    };\n\n    login(email, password) {\n        return new Promise((resolve, reject) => {\n            axios.get(`${this.url}/login`, { params: {email: email, password: password}})\n            .then(resp => resolve(resp.data))\n            .catch(resp => alert(resp));\n        });\n    }\n\n    addUser(name, email, password) {\n        return new Promise((resolve, reject) => {\n            axios.post(`${this.url}/addUser`, {name: name, email: email, password: password}, this.config)\n                .then(x => {\n                    resolve(x.data);\n                })\n                .catch(x => {\n                    alert(x);\n                    reject(x);\n                });\n        });\n    }\n\n    getUserById(id) {\n        return new Promise((resolve, reject) => {\n            axios.get(`${this.url}/users/${id}`, this.config)\n                .then(x => resolve(x.data))\n                .catch(x => {\n                    alert(x);\n                    reject(x);\n                });\n        });\n    }\n    \n    search(name, disease, symptom, min, max, sideEffect) {\n        var where = \"\";\n        if(name == 'N/A' || name == 'n/a')\n        {\n            if(disease == \"N/A\")\n            {\n                if(symptom == 'N/A')\n                {\n                    if(min == 'N/A' || min == 'n/a')\n                    {\n                        where = \"WHERE price <= \" + max;\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                    else if(max == 'N/A' || max == 'n/a')\n                    {\n                        where = \"WHERE price >= \" + min;\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                    else{\n                        return new Promise((resolve, reject) => {\n                            where = \"WHERE price Between\" + min + \" AND \" + max;\n                            axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                }\n                else\n                {\n                    where = \"WHERE price <= \" + max + \" AND s.id =\" + symptom; \n                    if(min == 'N/A' || min == 'n/a')\n                    {\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {price: max, symptom: symptom}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                    else if(max == 'N/A' || max == 'n/a')\n                    {\n                        where = \"WHERE price >= \" + max + \" AND s.id =\" + symptom;\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {price: max, symptom: symptom}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                    else{\n                        where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND s.id =\" + symptom;\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {max: max, min: min, symptom: symptom}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                }\n            }\n            else\n            {\n                if(symptom == 'N/A')\n                {\n                    if(min == 'N/A' || min == 'n/a')\n                    {\n                        where = \"WHERE price <= \" + max + \" AND d.id = \" + disease;\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                    else if(max == 'N/A' || max == 'n/a')\n                    {\n                        where = \"WHERE price >= \" + min + \" AND d.id = \" + disease;\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                    else{\n                        return new Promise((resolve, reject) => {\n                            where = \"WHERE price Between\" + min + \" AND \" + max + \" AND D.id = \" + disease;\n                            axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                }\n                else\n                {\n                    where = \"WHERE price <= \" + max + \" AND s.id =\" + symptom + \" AND D.id = \" + disease;\n                    if(min == 'N/A' || min == 'n/a')\n                    {\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {price: max, symptom: symptom}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                    else if(max == 'N/A' || max == 'n/a')\n                    {\n                        where = \"WHERE price >= \" + max + \" AND s.id =\" + symptom + \" AND D.id = \" + disease;\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {price: max, symptom: symptom}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                    else{\n                        where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND s.id =\" + symptom + \" AND D.id = \" + disease;\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {max: max, min: min, symptom: symptom}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                }\n            }\n        }\n        else\n        {\n            if(disease == \"N/A\")\n            {\n                if(symptom == 'N/A')\n                {\n                    if(min == 'N/A' || min == 'n/a')\n                    {\n                        where = \"WHERE price <= \" + max + \" AND name = \" + name;\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                    else if(max == 'N/A' || max == 'n/a')\n                    {\n                        where = \"WHERE price >= \" + min+ \" AND name = \" + name;\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                    else{\n                        return new Promise((resolve, reject) => {\n                            where = \"WHERE price Between\" + min + \" AND \" + max + \" AND name = \" + name;\n                            axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                }\n                else\n                {\n                    where = \"WHERE price <= \" + max + \" AND s.id =\" + symptom + \" AND name = \" + name;\n                    if(min == 'N/A' || min == 'n/a')\n                    {\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {price: max, symptom: symptom}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                    else if(max == 'N/A' || max == 'n/a')\n                    {\n                        where = \"WHERE price >= \" + max + \" AND s.id =\" + symptom + \" AND name = \" + name;\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {price: max, symptom: symptom}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                    else{\n                        where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND s.id =\" + symptom + \" AND name = \" + name;\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {max: max, min: min, symptom: symptom}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                }\n            }\n            else\n            {\n                if(symptom == 'N/A')\n                {\n                    if(min == 'N/A' || min == 'n/a')\n                    {\n                        where = \"WHERE price <= \" + max + \" AND d.id = \" + disease + \" AND name = \" + name;\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                    else if(max == 'N/A' || max == 'n/a')\n                    {\n                        where = \"WHERE price >= \" + min + \" AND d.id = \" + disease + \" AND name = \" + name;\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                    else{\n                        return new Promise((resolve, reject) => {\n                            where = \"WHERE price Between\" + min + \" AND \" + max + \" AND D.id = \" + disease + \" AND name = \" + name;\n                            axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                }\n                else\n                {\n                    where = \"WHERE price <= \" + max + \" AND s.id =\" + symptom + \" AND D.id = \" + disease + \" AND name = \" + name;\n                    if(min == 'N/A' || min == 'n/a')\n                    {\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {price: max, symptom: symptom}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                    else if(max == 'N/A' || max == 'n/a')\n                    {\n                        where = \"WHERE price >= \" + max + \" AND s.id =\" + symptom + \" AND D.id = \" + disease + \" AND name = \" + name;\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {price: max, symptom: symptom}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                    else{\n                        where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND s.id =\" + symptom + \" AND D.id = \" + disease + \" AND name = \" + name;\n                        return new Promise((resolve, reject) => {\n                            axios.get(`${this.url}/getDrugs`, {params: {max: max, min: min, symptom: symptom}})\n                            .then(resp => resolve(resp.data))\n                            .catch(resp => alert(resp));\n                        });\n                    }\n                }\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}