{"ast":null,"code":"import axios from 'axios';\nimport { createHash } from 'crypto';\nexport class NoverdoseRepo {\n  constructor() {\n    this.url = 'http://localhost:8000';\n    this.config = {};\n  }\n\n  login(email, password) {\n    return new Promise((resolve, reject) => {\n      axios.get(`${this.url}/login`, {\n        params: {\n          email: email,\n          password: password\n        }\n      }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n    });\n  }\n\n  addUser(name, email, password) {\n    return new Promise((resolve, reject) => {\n      axios.post(`${this.url}/addUser`, {\n        name: name,\n        email: email,\n        password: password\n      }, this.config).then(x => {\n        resolve(x.data);\n      }).catch(x => {\n        alert(x);\n        reject(x);\n      });\n    });\n  }\n\n  getUserById(id) {\n    return new Promise((resolve, reject) => {\n      axios.get(`${this.url}/users/${id}`, this.config).then(x => resolve(x.data)).catch(x => {\n        alert(x);\n        reject(x);\n      });\n    });\n  }\n\n  addSideEffect(name) {\n    return new Promise((resolve, reject) => {\n      axios.post(`${this.url}/addSideEffect`, {\n        params: {\n          name: name\n        }\n      }, this.config).then(x => {\n        console.log(\"SYmptomAdded\");\n      }).catch(x => {\n        alert(x);\n        reject(x);\n      });\n    });\n  }\n\n  search(name, disease, symptom, min, max, sideEffect) {\n    var where = \"\";\n\n    if (sideEffect == \"N/A\") {\n      if (name == 'N/A' || name == 'n/a') {\n        if (disease == \"N/A\") {\n          if (symptom == 'N/A') {\n            if (min == 'N/A' || min == 'n/a') {\n              where = \"WHERE price <= \" + max;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else if (max == 'N/A' || max == 'n/a') {\n              where = \"WHERE price >= \" + min;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else {\n              return new Promise((resolve, reject) => {\n                where = \"WHERE price Between\" + min + \" AND \" + max;\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            }\n          } else {\n            where = \"WHERE price <= \" + max + \" AND symptomId =\" + symptom;\n\n            if (min == 'N/A' || min == 'n/a') {\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else if (max == 'N/A' || max == 'n/a') {\n              where = \"WHERE price >= \" + max + \" AND symptomId =\" + symptom;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else {\n              where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND symptomId =\" + symptom;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            }\n          }\n        } else {\n          if (symptom == 'N/A') {\n            if (min == 'N/A' || min == 'n/a') {\n              where = \"WHERE price <= \" + max + \" AND diseaseId = \" + disease;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else if (max == 'N/A' || max == 'n/a') {\n              where = \"WHERE price >= \" + min + \" AND diseaseId = \" + disease;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else {\n              return new Promise((resolve, reject) => {\n                where = \"WHERE price Between\" + min + \" AND \" + max + \" AND diseaseId = \" + disease;\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            }\n          } else {\n            where = \"WHERE price <= \" + max + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease;\n\n            if (min == 'N/A' || min == 'n/a') {\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else if (max == 'N/A' || max == 'n/a') {\n              where = \"WHERE price >= \" + max + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else {\n              where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            }\n          }\n        }\n      } else {\n        if (disease == \"N/A\") {\n          if (symptom == 'N/A') {\n            if (min == 'N/A' || min == 'n/a') {\n              where = \"WHERE price <= \" + max + \" AND name = \" + name;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else if (max == 'N/A' || max == 'n/a') {\n              where = \"WHERE price >= \" + min + \" AND name = \" + name;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else {\n              return new Promise((resolve, reject) => {\n                where = \"WHERE price Between\" + min + \" AND \" + max + \" AND name = \" + name;\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            }\n          } else {\n            where = \"WHERE price <= \" + max + \" AND symptomId =\" + symptom + \" AND name = \" + name;\n\n            if (min == 'N/A' || min == 'n/a') {\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else if (max == 'N/A' || max == 'n/a') {\n              where = \"WHERE price >= \" + max + \" AND symptomId =\" + symptom + \" AND name = \" + name;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else {\n              where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND symptomId =\" + symptom + \" AND name = \" + name;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            }\n          }\n        } else {\n          if (symptom == 'N/A') {\n            if (min == 'N/A' || min == 'n/a') {\n              where = \"WHERE price <= \" + max + \" AND diseaseId = \" + disease + \" AND name = \" + name;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else if (max == 'N/A' || max == 'n/a') {\n              where = \"WHERE price >= \" + min + \" AND diseaseId = \" + disease + \" AND name = \" + name;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else {\n              return new Promise((resolve, reject) => {\n                where = \"WHERE price Between\" + min + \" AND \" + max + \" AND diseaseId = \" + disease + \" AND name = \" + name;\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            }\n          } else {\n            where = \"WHERE price <= \" + max + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease + \" AND name = \" + name;\n\n            if (min == 'N/A' || min == 'n/a') {\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else if (max == 'N/A' || max == 'n/a') {\n              where = \"WHERE price >= \" + max + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease + \" AND name = \" + name;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else {\n              where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease + \" AND name = \" + name;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    mwhere: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            }\n          }\n        }\n      }\n    } else {\n      if (name == 'N/A' || name == 'n/a') {\n        if (disease == \"N/A\") {\n          if (symptom == 'N/A') {\n            if (min == 'N/A' || min == 'n/a') {\n              where = \"WHERE price <= \" + max + \" AND sideEffectId = \" + sideEffect;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else if (max == 'N/A' || max == 'n/a') {\n              where = \"WHERE price >= \" + min + \" AND sideEffectId = \" + sideEffect;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else {\n              return new Promise((resolve, reject) => {\n                where = \"WHERE price Between\" + min + \" AND \" + max + \" AND sideEffectId = \" + sideEffect;\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            }\n          } else {\n            where = \"WHERE price <= \" + max + \" AND symptomId =\" + symptom + \" AND sideEffectId = \" + sideEffect;\n\n            if (min == 'N/A' || min == 'n/a') {\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else if (max == 'N/A' || max == 'n/a') {\n              where = \"WHERE price >= \" + max + \" AND symptomId =\" + symptom + \" AND sideEffectId = \" + sideEffect;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else {\n              where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND symptomId =\" + symptom + \" AND sideEffectId = \" + sideEffect;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            }\n          }\n        } else {\n          if (symptom == 'N/A') {\n            if (min == 'N/A' || min == 'n/a') {\n              where = \"WHERE price <= \" + max + \" AND diseaseId = \" + disease + \" AND sideEffectId = \" + sideEffect;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else if (max == 'N/A' || max == 'n/a') {\n              where = \"WHERE price >= \" + min + \" AND diseaseId = \" + disease + \" AND sideEffectId = \" + sideEffect;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else {\n              return new Promise((resolve, reject) => {\n                where = \"WHERE price Between\" + min + \" AND \" + max + \" AND diseaseId = \" + disease + \" AND sideEffectId = \" + sideEffect;\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            }\n          } else {\n            where = \"WHERE price <= \" + max + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease + \" AND sideEffectId = \" + sideEffect;\n\n            if (min == 'N/A' || min == 'n/a') {\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else if (max == 'N/A' || max == 'n/a') {\n              where = \"WHERE price >= \" + max + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease + \" AND sideEffectId = \" + sideEffect;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else {\n              where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease + \" AND sideEffectId = \" + sideEffect;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            }\n          }\n        }\n      } else {\n        if (disease == \"N/A\") {\n          if (symptom == 'N/A') {\n            if (min == 'N/A' || min == 'n/a') {\n              where = \"WHERE price <= \" + max + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else if (max == 'N/A' || max == 'n/a') {\n              where = \"WHERE price >= \" + min + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else {\n              return new Promise((resolve, reject) => {\n                where = \"WHERE price Between\" + min + \" AND \" + max + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            }\n          } else {\n            where = \"WHERE price <= \" + max + \" AND symptomId =\" + symptom + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n\n            if (min == 'N/A' || min == 'n/a') {\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else if (max == 'N/A' || max == 'n/a') {\n              where = \"WHERE price >= \" + max + \" AND symptomId =\" + symptom + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else {\n              where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND symptomId =\" + symptom + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            }\n          }\n        } else {\n          if (symptom == 'N/A') {\n            if (min == 'N/A' || min == 'n/a') {\n              where = \"WHERE price <= \" + max + \" AND diseaseId = \" + disease + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else if (max == 'N/A' || max == 'n/a') {\n              where = \"WHERE price >= \" + min + \" AND diseaseId = \" + disease + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else {\n              return new Promise((resolve, reject) => {\n                where = \"WHERE price Between\" + min + \" AND \" + max + \" AND diseaseId = \" + disease + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            }\n          } else {\n            where = \"WHERE price <= \" + max + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n\n            if (min == 'N/A' || min == 'n/a') {\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else if (max == 'N/A' || max == 'n/a') {\n              where = \"WHERE price >= \" + max + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            } else {\n              where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n              return new Promise((resolve, reject) => {\n                axios.get(`${this.url}/getDrugs`, {\n                  params: {\n                    where: where\n                  }\n                }).then(resp => resolve(resp.data)).catch(resp => alert(resp));\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/dylanweeks/Desktop/NOverdose/frontend/src/Api/NoverdoseRepo.js"],"names":["axios","createHash","NoverdoseRepo","url","config","login","email","password","Promise","resolve","reject","get","params","then","resp","data","catch","alert","addUser","name","post","x","getUserById","id","addSideEffect","console","log","search","disease","symptom","min","max","sideEffect","where","mwhere"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { createHash } from 'crypto';\n\nexport class NoverdoseRepo {\n\n    url = 'http://localhost:8000'\n\n    config = {\n    };\n\n    login(email, password) {\n        return new Promise((resolve, reject) => {\n            axios.get(`${this.url}/login`, { params: {email: email, password: password}})\n            .then(resp => resolve(resp.data))\n            .catch(resp => alert(resp));\n        });\n    }\n\n    addUser(name, email, password) {\n        return new Promise((resolve, reject) => {\n            axios.post(`${this.url}/addUser`, {name: name, email: email, password: password}, this.config)\n                .then(x => {\n                    resolve(x.data);\n                })\n                .catch(x => {\n                    alert(x);\n                    reject(x);\n                });\n        });\n    }\n\n    getUserById(id) {\n        return new Promise((resolve, reject) => {\n            axios.get(`${this.url}/users/${id}`, this.config)\n                .then(x => resolve(x.data))\n                .catch(x => {\n                    alert(x);\n                    reject(x);\n                });\n        });\n    }\n\n    addSideEffect(name) {\n        return new Promise((resolve, reject) => {\n            axios.post(`${this.url}/addSideEffect`, {params: {name: name}}, this.config)\n                .then(x => {\n                    console.log(\"SYmptomAdded\");\n                })\n                .catch(x => {\n                    alert(x);\n                    reject(x);\n                });\n        });\n    }\n    \n    search(name, disease, symptom, min, max, sideEffect) {\n        var where = \"\";\n        if(sideEffect == \"N/A\")\n        {\n            if(name == 'N/A' || name == 'n/a')\n            {\n                if(disease == \"N/A\")\n                {\n                    if(symptom == 'N/A')\n                    {\n                        if(min == 'N/A' || min == 'n/a')\n                        {\n                            where = \"WHERE price <= \" + max;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else if(max == 'N/A' || max == 'n/a')\n                        {\n                            where = \"WHERE price >= \" + min;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else{\n                            return new Promise((resolve, reject) => {\n                                where = \"WHERE price Between\" + min + \" AND \" + max;\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                    }\n                    else\n                    {\n                        where = \"WHERE price <= \" + max + \" AND symptomId =\" + symptom; \n                        if(min == 'N/A' || min == 'n/a')\n                        {\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else if(max == 'N/A' || max == 'n/a')\n                        {\n                            where = \"WHERE price >= \" + max + \" AND symptomId =\" + symptom;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else{\n                            where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND symptomId =\" + symptom;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                    }\n                }\n                else\n                {\n                    if(symptom == 'N/A')\n                    {\n                        if(min == 'N/A' || min == 'n/a')\n                        {\n                            where = \"WHERE price <= \" + max + \" AND diseaseId = \" + disease;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else if(max == 'N/A' || max == 'n/a')\n                        {\n                            where = \"WHERE price >= \" + min + \" AND diseaseId = \" + disease;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else{\n                            return new Promise((resolve, reject) => {\n                                where = \"WHERE price Between\" + min + \" AND \" + max + \" AND diseaseId = \" + disease;\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                    }\n                    else\n                    {\n                        where = \"WHERE price <= \" + max + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease;\n                        if(min == 'N/A' || min == 'n/a')\n                        {\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else if(max == 'N/A' || max == 'n/a')\n                        {\n                            where = \"WHERE price >= \" + max + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else{\n                            where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                    }\n                }\n            }\n            else\n            {\n                if(disease == \"N/A\")\n                {\n                    if(symptom == 'N/A')\n                    {\n                        if(min == 'N/A' || min == 'n/a')\n                        {\n                            where = \"WHERE price <= \" + max + \" AND name = \" + name;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else if(max == 'N/A' || max == 'n/a')\n                        {\n                            where = \"WHERE price >= \" + min+ \" AND name = \" + name;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else{\n                            return new Promise((resolve, reject) => {\n                                where = \"WHERE price Between\" + min + \" AND \" + max + \" AND name = \" + name;\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                    }\n                    else\n                    {\n                        where = \"WHERE price <= \" + max + \" AND symptomId =\" + symptom + \" AND name = \" + name;\n                        if(min == 'N/A' || min == 'n/a')\n                        {\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else if(max == 'N/A' || max == 'n/a')\n                        {\n                            where = \"WHERE price >= \" + max + \" AND symptomId =\" + symptom + \" AND name = \" + name;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else{\n                            where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND symptomId =\" + symptom + \" AND name = \" + name;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                    }\n                }\n                else\n                {\n                    if(symptom == 'N/A')\n                    {\n                        if(min == 'N/A' || min == 'n/a')\n                        {\n                            where = \"WHERE price <= \" + max + \" AND diseaseId = \" + disease + \" AND name = \" + name;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else if(max == 'N/A' || max == 'n/a')\n                        {\n                            where = \"WHERE price >= \" + min + \" AND diseaseId = \" + disease + \" AND name = \" + name;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else{\n                            return new Promise((resolve, reject) => {\n                                where = \"WHERE price Between\" + min + \" AND \" + max + \" AND diseaseId = \" + disease + \" AND name = \" + name;\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                    }\n                    else\n                    {\n                        where = \"WHERE price <= \" + max + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease + \" AND name = \" + name;\n                        if(min == 'N/A' || min == 'n/a')\n                        {\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else if(max == 'N/A' || max == 'n/a')\n                        {\n                            where = \"WHERE price >= \" + max + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease + \" AND name = \" + name;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else{\n                            where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease + \" AND name = \" + name;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {mwhere: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        else\n        {\n            if(name == 'N/A' || name == 'n/a')\n            {\n                if(disease == \"N/A\")\n                {\n                    if(symptom == 'N/A')\n                    {\n                        if(min == 'N/A' || min == 'n/a')\n                        {\n                            where = \"WHERE price <= \" + max + \" AND sideEffectId = \" + sideEffect; \n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else if(max == 'N/A' || max == 'n/a')\n                        {\n                            where = \"WHERE price >= \" + min+ \" AND sideEffectId = \" + sideEffect;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else{\n                            return new Promise((resolve, reject) => {\n                                where = \"WHERE price Between\" + min + \" AND \" + max + \" AND sideEffectId = \" + sideEffect;\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                    }\n                    else\n                    {\n                        where = \"WHERE price <= \" + max + \" AND symptomId =\" + symptom + \" AND sideEffectId = \" + sideEffect; \n                        if(min == 'N/A' || min == 'n/a')\n                        {\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else if(max == 'N/A' || max == 'n/a')\n                        {\n                            where = \"WHERE price >= \" + max + \" AND symptomId =\" + symptom + \" AND sideEffectId = \" + sideEffect;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else{\n                            where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND symptomId =\" + symptom + \" AND sideEffectId = \" + sideEffect;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                    }\n                }\n                else\n                {\n                    if(symptom == 'N/A')\n                    {\n                        if(min == 'N/A' || min == 'n/a')\n                        {\n                            where = \"WHERE price <= \" + max + \" AND diseaseId = \" + disease + \" AND sideEffectId = \" + sideEffect;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else if(max == 'N/A' || max == 'n/a')\n                        {\n                            where = \"WHERE price >= \" + min + \" AND diseaseId = \" + disease + \" AND sideEffectId = \" + sideEffect;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else{\n                            return new Promise((resolve, reject) => {\n                                where = \"WHERE price Between\" + min + \" AND \" + max + \" AND diseaseId = \" + disease + \" AND sideEffectId = \" + sideEffect;\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                    }\n                    else\n                    {\n                        where = \"WHERE price <= \" + max + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease + \" AND sideEffectId = \" + sideEffect;\n                        if(min == 'N/A' || min == 'n/a')\n                        {\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else if(max == 'N/A' || max == 'n/a')\n                        {\n                            where = \"WHERE price >= \" + max + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease + \" AND sideEffectId = \" + sideEffect;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else{\n                            where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease+ \" AND sideEffectId = \" + sideEffect;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                    }\n                }\n            }\n            else\n            {\n                if(disease == \"N/A\")\n                {\n                    if(symptom == 'N/A')\n                    {\n                        if(min == 'N/A' || min == 'n/a')\n                        {\n                            where = \"WHERE price <= \" + max + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else if(max == 'N/A' || max == 'n/a')\n                        {\n                            where = \"WHERE price >= \" + min+ \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else{\n                            return new Promise((resolve, reject) => {\n                                where = \"WHERE price Between\" + min + \" AND \" + max + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                    }\n                    else\n                    {\n                        where = \"WHERE price <= \" + max + \" AND symptomId =\" + symptom + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n                        if(min == 'N/A' || min == 'n/a')\n                        {\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else if(max == 'N/A' || max == 'n/a')\n                        {\n                            where = \"WHERE price >= \" + max + \" AND symptomId =\" + symptom + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else{\n                            where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND symptomId =\" + symptom + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                    }\n                }\n                else\n                {\n                    if(symptom == 'N/A')\n                    {\n                        if(min == 'N/A' || min == 'n/a')\n                        {\n                            where = \"WHERE price <= \" + max + \" AND diseaseId = \" + disease + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else if(max == 'N/A' || max == 'n/a')\n                        {\n                            where = \"WHERE price >= \" + min + \" AND diseaseId = \" + disease + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else{\n                            return new Promise((resolve, reject) => {\n                                where = \"WHERE price Between\" + min + \" AND \" + max + \" AND diseaseId = \" + disease + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect; \n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                    }\n                    else\n                    {\n                        where = \"WHERE price <= \" + max + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n                        if(min == 'N/A' || min == 'n/a')\n                        {\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else if(max == 'N/A' || max == 'n/a')\n                        {\n                            where = \"WHERE price >= \" + max + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect;\n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                        else{\n                            where = \"WHERE price BETWEEN \" + max + \" AND \" + min + \" AND symptomId =\" + symptom + \" AND diseaseId = \" + disease + \" AND name = \" + name + \" AND sideEffectId = \" + sideEffect; \n                            return new Promise((resolve, reject) => {\n                                axios.get(`${this.url}/getDrugs`, {params: {where: where}})\n                                .then(resp => resolve(resp.data))\n                                .catch(resp => alert(resp));\n                            });\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}